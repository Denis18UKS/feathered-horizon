При попытке отправить файл вместе с сообщением или без сообщения - пишет следующее:
Chats.tsx:211 
            
            
           POST http://localhost:5000/messages 400 (Bad Request)
sendMessage @ Chats.tsx:211
callCallback2 @ chunk-T2SWDQEL.js?v=0bf103c0:3674
invokeGuardedCallbackDev @ chunk-T2SWDQEL.js?v=0bf103c0:3699
invokeGuardedCallback @ chunk-T2SWDQEL.js?v=0bf103c0:3733
invokeGuardedCallbackAndCatchFirstError @ chunk-T2SWDQEL.js?v=0bf103c0:3736
executeDispatch @ chunk-T2SWDQEL.js?v=0bf103c0:7014
processDispatchQueueItemsInOrder @ chunk-T2SWDQEL.js?v=0bf103c0:7034
processDispatchQueue @ chunk-T2SWDQEL.js?v=0bf103c0:7043
dispatchEventsForPlugins @ chunk-T2SWDQEL.js?v=0bf103c0:7051
(anonymous) @ chunk-T2SWDQEL.js?v=0bf103c0:7174
batchedUpdates$1 @ chunk-T2SWDQEL.js?v=0bf103c0:18913
batchedUpdates @ chunk-T2SWDQEL.js?v=0bf103c0:3579
dispatchEventForPluginEventSystem @ chunk-T2SWDQEL.js?v=0bf103c0:7173
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ chunk-T2SWDQEL.js?v=0bf103c0:5478
dispatchEvent @ chunk-T2SWDQEL.js?v=0bf103c0:5472
dispatchDiscreteEvent @ chunk-T2SWDQEL.js?v=0bf103c0:5449Understand this errorAI
Chats.tsx:226 Ошибка: Error: Ошибка при отправке сообщения
    at sendMessage (Chats.tsx:219:41)
sendMessage @ Chats.tsx:226
await in sendMessage
callCallback2 @ chunk-T2SWDQEL.js?v=0bf103c0:3674
invokeGuardedCallbackDev @ chunk-T2SWDQEL.js?v=0bf103c0:3699
invokeGuardedCallback @ chunk-T2SWDQEL.js?v=0bf103c0:3733
invokeGuardedCallbackAndCatchFirstError @ chunk-T2SWDQEL.js?v=0bf103c0:3736
executeDispatch @ chunk-T2SWDQEL.js?v=0bf103c0:7014
processDispatchQueueItemsInOrder @ chunk-T2SWDQEL.js?v=0bf103c0:7034
processDispatchQueue @ chunk-T2SWDQEL.js?v=0bf103c0:7043
dispatchEventsForPlugins @ chunk-T2SWDQEL.js?v=0bf103c0:7051
(anonymous) @ chunk-T2SWDQEL.js?v=0bf103c0:7174
batchedUpdates$1 @ chunk-T2SWDQEL.js?v=0bf103c0:18913
batchedUpdates @ chunk-T2SWDQEL.js?v=0bf103c0:3579
dispatchEventForPluginEventSystem @ chunk-T2SWDQEL.js?v=0bf103c0:7173
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ chunk-T2SWDQEL.js?v=0bf103c0:5478
dispatchEvent @ chunk-T2SWDQEL.js?v=0bf103c0:5472
dispatchDiscreteEvent @ chunk-T2SWDQEL.js?v=0bf103c0:5449Understand this errorAI
Chats.tsx:211 
            
            
           POST http://localhost:5000/messages 400 (Bad Request)
sendMessage @ Chats.tsx:211
callCallback2 @ chunk-T2SWDQEL.js?v=0bf103c0:3674
invokeGuardedCallbackDev @ chunk-T2SWDQEL.js?v=0bf103c0:3699
invokeGuardedCallback @ chunk-T2SWDQEL.js?v=0bf103c0:3733
invokeGuardedCallbackAndCatchFirstError @ chunk-T2SWDQEL.js?v=0bf103c0:3736
executeDispatch @ chunk-T2SWDQEL.js?v=0bf103c0:7014
processDispatchQueueItemsInOrder @ chunk-T2SWDQEL.js?v=0bf103c0:7034
processDispatchQueue @ chunk-T2SWDQEL.js?v=0bf103c0:7043
dispatchEventsForPlugins @ chunk-T2SWDQEL.js?v=0bf103c0:7051
(anonymous) @ chunk-T2SWDQEL.js?v=0bf103c0:7174
batchedUpdates$1 @ chunk-T2SWDQEL.js?v=0bf103c0:18913
batchedUpdates @ chunk-T2SWDQEL.js?v=0bf103c0:3579
dispatchEventForPluginEventSystem @ chunk-T2SWDQEL.js?v=0bf103c0:7173
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ chunk-T2SWDQEL.js?v=0bf103c0:5478
dispatchEvent @ chunk-T2SWDQEL.js?v=0bf103c0:5472
dispatchDiscreteEvent @ chunk-T2SWDQEL.js?v=0bf103c0:5449Understand this errorAI
Chats.tsx:226 Ошибка: Error: Ошибка при отправке сообщения
    at sendMessage (Chats.tsx:219:41)


{message: "chatId или сообщение отсутствуют"}

Но при этом ChatId передаётся в запросе:
chatId: 43
message: 123
media: (binary)

Вот мой Chats.tsx:
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { LiquidButton } from "@/components/ui/liquid-button";
import { format } from "date-fns";
import { ru } from "date-fns/locale";

interface User {
    id: number;
    username: string;
    avatar: string;
    isFriend: boolean;  // Допустим, есть такая метка
}

interface Message {
    id: number;
    chat_id: number;
    user_id: number;
    message: string;
    created_at: string;
    username: string;
    read: boolean;
    media?: string; // Добавлено для медиафайлов
}


interface DecodedToken {
    id: number;
    username: string;
}

const Chats = () => {
    const { chatId } = useParams<{ chatId: string }>();
    const [selectedUser, setSelectedUser] = useState<User | null>(null);
    const [messages, setMessages] = useState<Message[]>([]);
    const [newMessage, setNewMessage] = useState('');
    const [users, setUsers] = useState<User[]>([]);
    const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [currentUser, setCurrentUser] = useState<DecodedToken | null>(null);
    const [unreadMessagesCount, setUnreadMessagesCount] = useState<{ [key: number]: number }>({});
    const [showScrollButton, setShowScrollButton] = useState(false);
    const [mediaFile, setMediaFile] = useState<File | null>(null);

    const navigate = useNavigate();
    const messagesEndRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const fetchFriends = async () => {
            const token = localStorage.getItem("token");
            if (!token) {
                navigate('/login');
                return;
            }

            try {
                const decodedToken = jwtDecode<DecodedToken>(token);
                setCurrentUser(decodedToken);

                const response = await fetch('http://localhost:5000/friends', {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}` },
                });

                const friends = await response.json();
                console.log("Полученные друзья:", friends); // ✅ Проверяем, что сервер действительно их возвращает

                setUsers(friends);
                setFilteredUsers(friends);
            } catch (error) {
                console.error("Ошибка загрузки друзей:", error);
                navigate('/login');
            }
        };


        fetchFriends();
    }, [navigate]);

    const deleteMessage = async (messageId: number) => {
        const token = localStorage.getItem("token");
        if (!token) return;

        const confirmed = window.confirm("Вы уверены, что хотите удалить данное сообщение?");
        if (!confirmed) return;

        try {
            const response = await fetch(`http://localhost:5000/messages/${messageId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` },
            });

            if (response.ok) {
                setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));
            } else {
                throw new Error('Ошибка при удалении сообщения');
            }
        } catch (error) {
            console.error('Ошибка:', error);
        }
    };


    useEffect(() => {
        if (!chatId) return;

        const fetchMessages = async () => {
            const token = localStorage.getItem("token");
            try {
                const response = await fetch(`http://localhost:5000/messages/${chatId}`, {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}` },
                });
                const messagesData = await response.json();
                setMessages(messagesData);
                setUnreadMessagesCount(prev => ({ ...prev, [Number(chatId)]: 0 }));
            } catch (error) {
                console.error("Ошибка загрузки сообщений:", error);
            }
        };

        fetchMessages();
    }, [chatId]);

    useEffect(() => {
        const socket = new WebSocket('ws://localhost:8080');

        socket.onmessage = (event) => {
            const notification = JSON.parse(event.data);

            if (notification.type === 'NEW_MESSAGE') {
                const message = notification.data;
                if (message.user_id !== currentUser?.id) {
                    if (message.chat_id !== Number(chatId)) {
                        toast(`Новое сообщение от ${message.username || 'Неизвестный'}`);
                        setUnreadMessagesCount(prev => ({
                            ...prev,
                            [message.chat_id]: (prev[message.chat_id] || 0) + 1
                        }));
                    } else {
                        setMessages(prev => [...prev, message]);
                        setShowScrollButton(true);
                    }
                }
            }
        };

        return () => socket.close();
    }, [chatId, currentUser?.id]);

    const selectChat = (user: User) => {
        if (selectedUser?.id === user.id) return;

        setSelectedUser(user);
        setMessages([]);
        setUnreadMessagesCount(prev => ({ ...prev, [user.id]: 0 }));

        const token = localStorage.getItem("token");
        if (!token) return;

        fetch('http://localhost:5000/chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({ userId2: user.id }),
        })
            .then(response => response.json())
            .then(chatData => {
                if (chatData.id) {
                    navigate(`/chats/${chatData.id}`);
                }
            })
            .catch(err => console.error("Ошибка при создании чата", err));
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files.length > 0) {
            setMediaFile(e.target.files[0]);
        }
    };

    const sendMessage = async () => {
        if (newMessage.trim() === '' && !mediaFile) return;

        const token = localStorage.getItem("token");
        if (!token) return;

        const payload: any = {
            chatId: Number(chatId), // Убедитесь, что это число
            message: newMessage.trim() // Убираем лишние пробелы
        };

        // Если есть медиафайл
        if (mediaFile) {
            const formData = new FormData();
            formData.append('chatId', String(chatId)); // Преобразуем в строку
            formData.append('message', newMessage.trim());
            formData.append('media', mediaFile);

            try {
                const response = await fetch(`http://localhost:5000/messages`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });

                if (!response.ok) throw new Error('Ошибка при отправке сообщения');
                const sentMessage = await response.json();
                setMessages(prev => [...prev, sentMessage]);
                setNewMessage(''); // Очищаем поле ввода
                setMediaFile(null); // Очищаем файл
                scrollToBottom();
            } catch (error) {
                console.error('Ошибка:', error);
            }
        } else {
            // Без медиафайла, просто текст
            try {
                const response = await fetch(`http://localhost:5000/messages`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) throw new Error('Ошибка при отправке сообщения');
                const sentMessage = await response.json();
                setMessages(prev => [...prev, sentMessage]);
                setNewMessage(''); // Очищаем поле ввода
                scrollToBottom();
            } catch (error) {
                console.error('Ошибка:', error);
            }
        }
    };



    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            sendMessage();
        }
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const query = e.target.value.toLowerCase();
        setSearchQuery(query);
        setFilteredUsers(users.filter((user: User) => user.username.toLowerCase().includes(query)));
    };

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    const getAvatarUrl = (avatar: string) => {
        return avatar ? `http://localhost:5000${avatar}` : '/images/default-avatar.png';
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString("ru-RU", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    };


    if (!currentUser) return <div>Загрузка...</div>;

    return (
        <div className="container mx-auto px-4 py-8">
            <ToastContainer />
            <div className="flex space-x-8">
                <aside className="w-1/4 user-list">
                    <Card className="w-full">
                        <CardHeader>
                            <CardTitle>Список друзей</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <Input
                                type="text"
                                placeholder="Поиск..."
                                value={searchQuery}
                                onChange={handleSearchChange}
                                className="w-full mb-4"
                            />
                            <ul className="space-y-2">
                                {filteredUsers.length === 0 ? (
                                    <li className="p-2 text-center">Нет друзей</li>
                                ) : (
                                    filteredUsers.map(user => (
                                        <li
                                            key={user.id}
                                            onClick={() => selectChat(user)}
                                            className={`p-2 rounded cursor-pointer flex items-center space-x-2 ${selectedUser?.id === user.id ? 'bg-primary/10' : ''}`}
                                        >
                                            <img src={getAvatarUrl(user.avatar)} alt="avatar" className="w-8 h-8 rounded-full" />
                                            <p>{user.username}</p>
                                        </li>
                                    ))
                                )}
                            </ul>
                        </CardContent>
                    </Card>
                </aside>

                <main className="w-3/4 chat-box">
                    <Card className="w-full">
                        <CardHeader>
                            <CardTitle>{selectedUser ? selectedUser.username : 'Выберите чат'}</CardTitle>
                        </CardHeader>
                        <CardContent className="h-[500px] overflow-y-auto space-y-4">
                            {messages.map(message => (
                                <div
                                    key={message.id}
                                    onContextMenu={(e) => {
                                        e.preventDefault();
                                        if (message.user_id === currentUser?.id) {
                                            deleteMessage(message.id);
                                        }
                                    }}
                                    className={`w-full mb-4 rounded-lg p-3 ${message.user_id === currentUser?.id ? 'bg-blue-100 ml-auto text-right' : 'bg-gray-100 mr-auto text-left'}`}
                                >
                                    <div className="text-sm text-gray-500">{message.username}</div>
                                    <div className="break-all">{message.message}</div>
                                    <div className="text-xs text-gray-500 mt-1">{formatDate(message.created_at)}</div>
                                </div>
                            ))}

                            <div ref={messagesEndRef} />
                        </CardContent>
                        {selectedUser && (
                            <CardFooter className="flex items-center space-x-2">
                                <Input type="file" onChange={handleFileChange} />
                                <Input type="text" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} onKeyDown={handleKeyDown} placeholder="Введите сообщение..." className="w-full" />
                                <Button onClick={sendMessage}>Отправить</Button>
                            </CardFooter>
                        )}
                    </Card>
                </main>
            </div>
        </div>
    );
};

export default Chats;

и server.js:
app.get('/chats', verifyToken, async (req, res) => {
    const { id } = req.user;
    try {
        const [chats] = await db.query(
            `SELECT c.id, u1.username AS user1, u2.username AS user2, c.created_at
            FROM chats c
            JOIN users u1 ON c.user_id_1 = u1.id
            JOIN users u2 ON c.user_id_2 = u2.id
            WHERE c.user_id_1 = ? OR c.user_id_2 = ?`,
            [id, id]
        );
        res.json(chats);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Ошибка при получении чатов' });
    }
});

// Чаты и сообщения
app.post('/messages', verifyToken, async (req, res) => {
    const { chatId, message } = req.body;
    const { id: userId } = req.user;  // Получаем ID текущего пользователя

    // Проверяем, что chatId и message не пустые
    if (!chatId || !message) {
        return res.status(400).json({ message: "chatId или сообщение отсутствуют" });
    }

    try {
        // Обработка медиафайлов, если они есть
        let mediaUrl = null;
        if (req.files && req.files.media) {
            // Сохраняем файл и получаем URL (реализуйте сохранение файла)
            const media = req.files.media;
            mediaUrl = `/uploads/${media.name}`;  // Путь к файлу
            // Сохраните файл в нужную папку на сервере
            await media.mv(`./uploads/${media.name}`);
        }

        // Сохраняем сообщение в базе данных
        const [result] = await db.query(
            `INSERT INTO messages (chat_id, user_id, message, media) VALUES (?, ?, ?, ?)`,
            [chatId, userId, message, mediaUrl]
        );

        // Получаем данные о только что добавленном сообщении
        const [newMessage] = await db.query(
            `SELECT m.id, m.chat_id, m.user_id, m.message, m.created_at, u.username
            FROM messages m
            JOIN users u ON m.user_id = u.id
            WHERE m.id = ?`,
            [result.insertId]
        );

        res.status(200).json(newMessage[0]);  // Возвращаем добавленное сообщение
    } catch (error) {
        console.error('Ошибка при добавлении сообщения:', error);
        res.status(500).json({ message: "Ошибка сервера" });
    }
});



app.get('/messages/:chatId', verifyToken, async (req, res) => {
    const { chatId } = req.params;
    try {
        const [messages] = await db.query(
            'SELECT m.*, u.username FROM messages m JOIN users u ON m.user_id = u.id WHERE m.chat_id = ? ORDER BY m.created_at',
            [chatId]
        );
        console.log(messages); // Логирование сообщений
        res.json(messages);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Ошибка при получении сообщений' });
    }
});

app.post('/chats', verifyToken, async (req, res) => {
    const { userId2 } = req.body;
    const { id: userId1 } = req.user;

    try {
        const [existingChat] = await db.query(
            'SELECT * FROM chats WHERE (user_id_1 = ? AND user_id_2 = ?) OR (user_id_1 = ? AND user_id_2 = ?)',
            [userId1, userId2, userId2, userId1]
        );

        if (existingChat.length > 0) {
            return res.status(200).json(existingChat[0]);
        }

        const [result] = await db.query(
            'INSERT INTO chats (user_id_1, user_id_2) VALUES (?, ?)',
            [userId1, userId2]
        );

        res.status(201).json({ id: result.insertId });
    } catch (err) {
        console.error('Ошибка при создании чата:', err);
        res.status(500).json({ message: 'Ошибка при создании чата' });
    }
});


// Удаление сообщения
app.delete('/messages/:messageId', verifyToken, async (req, res) => {
    const { messageId } = req.params;
    const userId = req.user.id;

    try {
        // Проверяем, что сообщение принадлежит пользователю
        const [message] = await db.query(
            'SELECT * FROM messages WHERE id = ? AND user_id = ?',
            [messageId, userId]
        );

        if (message.length === 0) {
            return res.status(403).json({ message: 'Нет прав на удаление этого сообщения' });
        }

        await db.query('DELETE FROM messages WHERE id = ?', [messageId]);

        // Уведомляем клиентов об удалении сообщения
        notifyClients({
            type: 'DELETE_MESSAGE',
            data: {
                messageId: parseInt(messageId),
                chatId: message[0].chat_id
            }
        });

        res.status(200).json({ message: 'Сообщение удалено' });
    } catch (error) {
        console.error('Ошибка при удалении сообщения:', error);
        res.status(500).json({ message: 'Ошибка при удалении сообщения' });
    }
});

// Очистка чата
app.delete('/chats/:chatId/messages', verifyToken, async (req, res) => {
    const { chatId } = req.params;
    const userId = req.user.id;

    try {
        // Проверяем, что пользователь является участником чата
        const [chat] = await db.query(
            'SELECT * FROM chats WHERE id = ? AND (user_id_1 = ? OR user_id_2 = ?)',
            [chatId, userId, userId]
        );

        if (chat.length === 0) {
            return res.status(403).json({ message: 'Нет прав на очистку этого чата' });
        }

        await db.query('DELETE FROM messages WHERE chat_id = ?', [chatId]);

        // Уведомляем клиентов об очистке чата
        notifyClients({
            type: 'CLEAR_CHAT',
            data: { chatId: parseInt(chatId) }
        });

        res.status(200).json({ message: 'Чат очищен' });
    } catch (error) {
        console.error('Ошибка при очистке чата:', error);
        res.status(500).json({ message: 'Ошибка при очистке чата' });
    }
});

// Добавление загрузки файлов
// Эндпоинт для загрузки файлов в чат
app.post('/messages/upload', verifyToken, upload.single('file'), async (req, res) => {
    const { chatId } = req.body;
    const userId = req.user.id;
    const file = req.file;

    if (!chatId || !file) {
        return res.status(400).json({ message: 'chatId или файл отсутствует' });
    }

    try {
        // Добавляем информацию о файле в базу данных
        const [result] = await db.query(
            'INSERT INTO messages (chat_id, user_id, message, file_name, file_path, file_type, created_at) VALUES (?, ?, ?, ?, ?, ?, NOW())',
            [chatId, userId, '', file.originalname, file.path, file.mimetype]
        );

        const [user] = await db.query('SELECT username FROM users WHERE id = ?', [userId]);

        const newMessage = {
            id: result.insertId,
            chat_id: parseInt(chatId),
            user_id: userId,
            message: '',
            username: user[0].username,
            file_name: file.originalname,
            file_path: `/uploads/chat_files/${path.basename(file.path)}`,
            file_type: file.mimetype,
            created_at: new Date(),
            read: false,
        };

        notifyClients({ type: 'NEW_MESSAGE', data: newMessage });

        res.status(201).json(newMessage);
    } catch (error) {
        console.error('Ошибка при загрузке файла:', error);
        res.status(500).json({ message: 'Ошибка при загрузке файла' });
    }
});

// Статическая подача файлов из папки uploads
app.use('/uploads/chats/media', express.static(path.join(__dirname, 'uploads')));
